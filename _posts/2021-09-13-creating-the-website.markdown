---
layout: post
title:  "Starting the website"
date:   2021-09-13 20:04:30 -0400
categories: journey
---
Okay I want to start a blog… now what? Well, there are way more things to consider in the context of a developer. Should I build one from scratch, host it on WordPress or something in between? For my scenario, I do not have much front end experience and won’t specifically looking for a UX design position so I would want something prebuilt. But since I will be utilizing web technologies in the future, I want something that can be (easily) modified later to sandbox new features I learn as I go. After reading up on GitHub pages and Jekyll, it seemed to be a good fit between versatility and ease of use *assuming you have a mac* to get my feet wet. Trying to get Jekyll working on a PC was an absolute nightmare that failed getting past the install phase. Luckily having a MacBook, it was fairly painless to install the Ruby gems and get the basic template up and running.

What about the website? For my initial needs there is no reason to reinvent the wheel either, a simple portfolio website template should be enough for now and I can just expand or modify it in the future as my skillset improves or my needs change. The google search finding a suitable template became an eye-opening experience for the technologies I am NOT up to speed on. Bootstraps, REACTive sites, static site generators… where do I start, do I need to dig into another rabbit hole? Well once again, I do not have a front-end background and not wanting to focus there yet so a simple, possibly minimalist site should be my starting point so that is what I did.

What if my portfolio is blank? Most of my hobby projects and tasks are not suitable for public consumption or a professional setting, so how can I demo what I have done?  Common sense approach is to start small, make some working prototypes that make sense in a business setting, then expand the breadth and depth of my code as my professional skillset increases.  I had to create a custom file monitoring API, so my first “official” repo could be a self-contained NuGet making the API public facing.  After that I can push more into my side project creating a companion app for one my favorite games.  I will also have a place holder for a future project that I will use as a discussion point in possible future interviews; a web enabled bug tracking program (more on that later).
